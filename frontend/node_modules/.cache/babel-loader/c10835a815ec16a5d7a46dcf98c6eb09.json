{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _getPrototypeOf = _interopRequireDefault(require(\"@babel/runtime/core-js/object/get-prototype-of\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _keycode = _interopRequireDefault(require(\"keycode\"));\n\nvar _warning = _interopRequireDefault(require(\"warning\"));\n\nvar _Menu = _interopRequireDefault(require(\"../Menu/Menu\"));\n\nvar _Input = require(\"../Input/Input\");\n/**\n * @ignore - internal component.\n */\n\n\nvar SelectInput =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inherits2.default)(SelectInput, _React$Component);\n\n  function SelectInput() {\n    var _ref;\n\n    var _temp, _this;\n\n    (0, _classCallCheck2.default)(this, SelectInput);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return (0, _possibleConstructorReturn2.default)(_this, (_temp = _this = (0, _possibleConstructorReturn2.default)(this, (_ref = SelectInput.__proto__ || (0, _getPrototypeOf.default)(SelectInput)).call.apply(_ref, [this].concat(args))), Object.defineProperty((0, _assertThisInitialized2.default)(_this), \"state\", {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: {\n        open: false\n      }\n    }), Object.defineProperty((0, _assertThisInitialized2.default)(_this), \"ignoreNextBlur\", {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: false\n    }), Object.defineProperty((0, _assertThisInitialized2.default)(_this), \"displayNode\", {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: null\n    }), Object.defineProperty((0, _assertThisInitialized2.default)(_this), \"displayWidth\", {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: null\n    }), Object.defineProperty((0, _assertThisInitialized2.default)(_this), \"isOpenControlled\", {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: _this.props.open !== undefined\n    }), Object.defineProperty((0, _assertThisInitialized2.default)(_this), \"isControlled\", {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: _this.props.value != null\n    }), Object.defineProperty((0, _assertThisInitialized2.default)(_this), \"updateDisplayWidth\", {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: function value() {\n        // Perfom the layout computation outside of the render method.\n        if (_this.displayNode) {\n          _this.displayWidth = _this.displayNode.clientWidth;\n        }\n      }\n    }), Object.defineProperty((0, _assertThisInitialized2.default)(_this), \"update\", {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: _this.isOpenControlled ? function (_ref2) {\n        var event = _ref2.event,\n            open = _ref2.open;\n\n        if (open) {\n          _this.props.onOpen(event);\n        } else {\n          _this.props.onClose(event);\n        }\n      } : function (_ref3) {\n        var open = _ref3.open;\n        return _this.setState({\n          open: open\n        });\n      }\n    }), Object.defineProperty((0, _assertThisInitialized2.default)(_this), \"handleClick\", {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: function value(event) {\n        // Opening the menu is going to blur the. It will be focused back when closed.\n        _this.ignoreNextBlur = true;\n\n        _this.update({\n          open: true,\n          event: event\n        });\n      }\n    }), Object.defineProperty((0, _assertThisInitialized2.default)(_this), \"handleClose\", {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: function value(event) {\n        _this.update({\n          open: false,\n          event: event\n        });\n      }\n    }), Object.defineProperty((0, _assertThisInitialized2.default)(_this), \"handleItemClick\", {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: function value(child) {\n        return function (event) {\n          if (!_this.props.multiple) {\n            _this.update({\n              open: false,\n              event: event\n            });\n          }\n\n          var _this$props = _this.props,\n              onChange = _this$props.onChange,\n              name = _this$props.name;\n\n          if (onChange) {\n            var value;\n            var target;\n\n            if (event.target) {\n              target = event.target;\n            }\n\n            if (_this.props.multiple) {\n              value = Array.isArray(_this.props.value) ? (0, _toConsumableArray2.default)(_this.props.value) : [];\n              var itemIndex = value.indexOf(child.props.value);\n\n              if (itemIndex === -1) {\n                value.push(child.props.value);\n              } else {\n                value.splice(itemIndex, 1);\n              }\n            } else {\n              value = child.props.value;\n            }\n\n            event.persist();\n            event.target = (0, _objectSpread2.default)({}, target, {\n              value: value,\n              name: name\n            });\n            onChange(event, child);\n          }\n        };\n      }\n    }), Object.defineProperty((0, _assertThisInitialized2.default)(_this), \"handleBlur\", {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: function value(event) {\n        if (_this.ignoreNextBlur === true) {\n          // The parent components are relying on the bubbling of the event.\n          event.stopPropagation();\n          _this.ignoreNextBlur = false;\n          return;\n        }\n\n        if (_this.props.onBlur) {\n          _this.props.onBlur(event);\n        }\n      }\n    }), Object.defineProperty((0, _assertThisInitialized2.default)(_this), \"handleKeyDown\", {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: function value(event) {\n        if (_this.props.readOnly) {\n          return;\n        }\n\n        if (['space', 'up', 'down'].indexOf((0, _keycode.default)(event)) !== -1) {\n          event.preventDefault(); // Opening the menu is going to blur the. It will be focused back when closed.\n\n          _this.ignoreNextBlur = true;\n\n          _this.update({\n            open: true,\n            event: event\n          });\n        }\n      }\n    }), Object.defineProperty((0, _assertThisInitialized2.default)(_this), \"handleDisplayRef\", {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: function value(node) {\n        _this.displayNode = node;\n\n        _this.updateDisplayWidth();\n      }\n    }), Object.defineProperty((0, _assertThisInitialized2.default)(_this), \"handleSelectRef\", {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: function value(node) {\n        if (!_this.props.inputRef) {\n          return;\n        }\n\n        _this.props.inputRef({\n          node: node,\n          // By pass the native input as we expose a rich object (array).\n          value: _this.props.value\n        });\n      }\n    }), _temp));\n  }\n\n  (0, _createClass2.default)(SelectInput, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.isOpenControlled && this.props.open) {\n        // Focus the display node so the focus is restored on this element once\n        // the menu is closed.\n        this.displayNode.focus(); // Rerender with the resolve `displayNode` reference.\n\n        this.forceUpdate();\n      }\n\n      if (this.props.autoFocus && !this.props.native) {\n        this.displayNode.focus();\n      }\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate() {\n      this.updateDisplayWidth();\n      return true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _props = this.props,\n          autoWidth = _props.autoWidth,\n          children = _props.children,\n          classes = _props.classes,\n          classNameProp = _props.className,\n          disabled = _props.disabled,\n          displayEmpty = _props.displayEmpty,\n          IconComponent = _props.IconComponent,\n          inputRef = _props.inputRef,\n          _props$MenuProps = _props.MenuProps,\n          MenuProps = _props$MenuProps === void 0 ? {} : _props$MenuProps,\n          multiple = _props.multiple,\n          name = _props.name,\n          native = _props.native,\n          onBlur = _props.onBlur,\n          onChange = _props.onChange,\n          onClose = _props.onClose,\n          onFocus = _props.onFocus,\n          onOpen = _props.onOpen,\n          openProp = _props.open,\n          readOnly = _props.readOnly,\n          renderValue = _props.renderValue,\n          SelectDisplayProps = _props.SelectDisplayProps,\n          tabIndexProp = _props.tabIndex,\n          _props$type = _props.type,\n          type = _props$type === void 0 ? 'hidden' : _props$type,\n          value = _props.value,\n          other = (0, _objectWithoutProperties2.default)(_props, [\"autoWidth\", \"children\", \"classes\", \"className\", \"disabled\", \"displayEmpty\", \"IconComponent\", \"inputRef\", \"MenuProps\", \"multiple\", \"name\", \"native\", \"onBlur\", \"onChange\", \"onClose\", \"onFocus\", \"onOpen\", \"open\", \"readOnly\", \"renderValue\", \"SelectDisplayProps\", \"tabIndex\", \"type\", \"value\"]);\n      var open = this.isOpenControlled && this.displayNode ? openProp : this.state.open;\n\n      if (native) {\n        process.env.NODE_ENV !== \"production\" ? (0, _warning.default)(multiple === false, 'Material-UI: you can not use the `native={true}` and `multiple={true}` properties ' + 'at the same time on a `Select` component.') : void 0;\n        process.env.NODE_ENV !== \"production\" ? (0, _warning.default)(!renderValue, 'Material-UI: the `renderValue` property is not used by the native implementation.') : void 0;\n        process.env.NODE_ENV !== \"production\" ? (0, _warning.default)(!displayEmpty, 'Material-UI: the `displayEmpty` property is not used by the native implementation.') : void 0;\n        return _react.default.createElement(\"div\", {\n          className: classes.root\n        }, _react.default.createElement(\"select\", (0, _extends2.default)({\n          className: (0, _classnames.default)(classes.select, (0, _defineProperty2.default)({}, classes.disabled, disabled), classNameProp),\n          name: name,\n          disabled: disabled,\n          onBlur: onBlur,\n          onChange: onChange,\n          onFocus: onFocus,\n          value: value,\n          readOnly: readOnly,\n          ref: inputRef\n        }, other), children), _react.default.createElement(IconComponent, {\n          className: classes.icon\n        }));\n      }\n\n      if (!this.isControlled) {\n        throw new Error('Material-UI: the `value` property is required ' + 'when using the `Select` component with `native=false` (default).');\n      }\n\n      var display;\n      var displaySingle = '';\n      var displayMultiple = [];\n      var computeDisplay = false; // No need to display any value if the field is empty.\n\n      if ((0, _Input.isFilled)(this.props) || displayEmpty) {\n        if (renderValue) {\n          display = renderValue(value);\n        } else {\n          computeDisplay = true;\n        }\n      }\n\n      var items = _react.default.Children.map(children, function (child) {\n        if (!_react.default.isValidElement(child)) {\n          return null;\n        }\n\n        var selected;\n\n        if (multiple) {\n          if (!Array.isArray(value)) {\n            throw new Error('Material-UI: the `value` property must be an array ' + 'when using the `Select` component with `multiple`.');\n          }\n\n          selected = value.indexOf(child.props.value) !== -1;\n\n          if (selected && computeDisplay) {\n            displayMultiple.push(child.props.children);\n          }\n        } else {\n          selected = value === child.props.value;\n\n          if (selected && computeDisplay) {\n            displaySingle = child.props.children;\n          }\n        }\n\n        return _react.default.cloneElement(child, {\n          onClick: _this2.handleItemClick(child),\n          role: 'option',\n          selected: selected,\n          value: undefined,\n          // The value is most likely not a valid HTML attribute.\n          'data-value': child.props.value // Instead, we provide it as a data attribute.\n\n        });\n      });\n\n      if (computeDisplay) {\n        display = multiple ? displayMultiple.join(', ') : displaySingle;\n      }\n\n      var MenuMinWidth = this.displayNode && !autoWidth ? this.displayWidth : undefined;\n      var tabIndex;\n\n      if (typeof tabIndexProp !== 'undefined') {\n        tabIndex = tabIndexProp;\n      } else {\n        tabIndex = disabled ? null : 0;\n      }\n\n      return _react.default.createElement(\"div\", {\n        className: classes.root\n      }, _react.default.createElement(\"div\", (0, _extends2.default)({\n        className: (0, _classnames.default)(classes.select, classes.selectMenu, (0, _defineProperty2.default)({}, classes.disabled, disabled), classNameProp),\n        ref: this.handleDisplayRef,\n        \"aria-pressed\": open ? 'true' : 'false',\n        tabIndex: tabIndex,\n        role: \"button\",\n        \"aria-owns\": open ? \"menu-\".concat(name || '') : null,\n        \"aria-haspopup\": \"true\",\n        onKeyDown: this.handleKeyDown,\n        onBlur: this.handleBlur,\n        onClick: disabled || readOnly ? null : this.handleClick,\n        onFocus: onFocus\n      }, SelectDisplayProps), display || _react.default.createElement(\"span\", {\n        dangerouslySetInnerHTML: {\n          __html: '&#8203'\n        }\n      })), _react.default.createElement(\"input\", (0, _extends2.default)({\n        value: Array.isArray(value) ? value.join(',') : value,\n        name: name,\n        readOnly: readOnly,\n        ref: this.handleSelectRef,\n        type: type\n      }, other)), _react.default.createElement(IconComponent, {\n        className: classes.icon\n      }), _react.default.createElement(_Menu.default, (0, _extends2.default)({\n        id: \"menu-\".concat(name || ''),\n        anchorEl: this.displayNode,\n        open: open,\n        onClose: this.handleClose\n      }, MenuProps, {\n        MenuListProps: (0, _objectSpread2.default)({\n          role: 'listbox'\n        }, MenuProps.MenuListProps),\n        PaperProps: (0, _objectSpread2.default)({}, MenuProps.PaperProps, {\n          style: (0, _objectSpread2.default)({\n            minWidth: MenuMinWidth\n          }, MenuProps.PaperProps != null ? MenuProps.PaperProps.style : null)\n        })\n      }), items));\n    }\n  }]);\n  return SelectInput;\n}(_react.default.Component);\n\nSelectInput.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * @ignore\n   */\n  autoFocus: _propTypes.default.bool,\n\n  /**\n   * If true, the width of the popover will automatically be set according to the items inside the\n   * menu, otherwise it will be at least the width of the select input.\n   */\n  autoWidth: _propTypes.default.bool,\n\n  /**\n   * The option elements to populate the select with.\n   * Can be some `MenuItem` when `native` is false and `option` when `native` is true.\n   */\n  children: _propTypes.default.node,\n\n  /**\n   * Useful to extend the style applied to components.\n   */\n  classes: _propTypes.default.object.isRequired,\n\n  /**\n   * The CSS class name of the select element.\n   */\n  className: _propTypes.default.string,\n\n  /**\n   * If `true`, the select will be disabled.\n   */\n  disabled: _propTypes.default.bool,\n\n  /**\n   * If `true`, the selected item is displayed even if its value is empty.\n   * You can only use it when the `native` property is `false` (default).\n   */\n  displayEmpty: _propTypes.default.bool,\n\n  /**\n   * The icon that displays the arrow.\n   */\n  IconComponent: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.func]),\n\n  /**\n   * Use that property to pass a ref callback to the native select element.\n   */\n  inputRef: _propTypes.default.func,\n\n  /**\n   * Properties applied to the `Menu` element.\n   */\n  MenuProps: _propTypes.default.object,\n\n  /**\n   * If true, `value` must be an array and the menu will support multiple selections.\n   * You can only use it when the `native` property is `false` (default).\n   */\n  multiple: _propTypes.default.bool,\n\n  /**\n   * Name attribute of the `select` or hidden `input` element.\n   */\n  name: _propTypes.default.string,\n\n  /**\n   * If `true`, the component will be using a native `select` element.\n   */\n  native: _propTypes.default.bool,\n\n  /**\n   * @ignore\n   */\n  onBlur: _propTypes.default.func,\n\n  /**\n   * Callback function fired when a menu item is selected.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value`.\n   * @param {object} [child] The react element that was selected when `native` is `false` (default).\n   */\n  onChange: _propTypes.default.func,\n\n  /**\n   * Callback fired when the component requests to be closed.\n   * Useful in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback\n   */\n  onClose: _propTypes.default.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: _propTypes.default.func,\n\n  /**\n   * Callback fired when the component requests to be opened.\n   * Useful in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback\n   */\n  onOpen: _propTypes.default.func,\n\n  /**\n   * Control `select` open state.\n   * You can only use it when the `native` property is `false` (default).\n   */\n  open: _propTypes.default.bool,\n\n  /**\n   * @ignore\n   */\n  readOnly: _propTypes.default.bool,\n\n  /**\n   * Render the selected value.\n   * You can only use it when the `native` property is `false` (default).\n   *\n   * @param {*} value The `value` provided to the component.\n   * @returns {ReactElement}\n   */\n  renderValue: _propTypes.default.func,\n\n  /**\n   * Properties applied to the clickable div element.\n   */\n  SelectDisplayProps: _propTypes.default.object,\n\n  /**\n   * @ignore\n   */\n  tabIndex: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),\n\n  /**\n   * @ignore\n   */\n  type: _propTypes.default.string,\n\n  /**\n   * The input value.\n   * This property is required when the `native` property is `false` (default).\n   */\n  value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]))])\n} : {};\nvar _default = SelectInput;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}